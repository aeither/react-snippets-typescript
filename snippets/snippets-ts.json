{
  "Import React": {
    "prefix": "imr",
    "body": ["import * as React from 'react';\n"],
    "description": "Import React"
  },

  "Import External Module": {
    "prefix": "imem",
    "body": ["import { $2 } from '$1';\n"],
    "description": "Import External Module"
  },

  "Import ReactDOM": {
    "prefix": "imrd",
    "body": ["import ReactDOM from 'react-dom';"],
    "description": "Import ReactDOM"
  },

  "Import React, { useState }": {
    "prefix": "ims",
    "body": ["import { useState } from 'react';\n"],
    "description": "Import { useState }"
  },

  "Import { useState, useEffect }": {
    "prefix": "imse",
    "body": ["import { useState, useEffect } from 'react';\n"],
    "description": "Import { useState, useEffect }"
  },

  "useEffect": {
    "prefix": "use",
    "body": ["useEffect(() => {", "\t$1", "}, [$2]);"],
    "description": "useEffect Hook"
  },

  "UseState": {
    "prefix": "uss",
    "body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);"],
    "description": "Declare a new state Variable using the State Hook. Hit Tab to apply CamelCase to function"
  },

  "UseHook": {
    "prefix": "usx",
    "body": ["const { $3 } = $1($2);"],
    "description": "Declare a new state variable using X Hook"
  },

  "Console Log": {
    "prefix": "clg",
    "body": ["console.log($1);"],
    "description": "Console Log"
  },

  "Console Log Object": {
    "prefix": "clo",
    "body": ["console.log('$1', $1);"],
    "description": "Console Log Object"
  },

  "Named function": {
    "prefix": "nfn",
    "body": ["const $1 = ($2) => {", "\t$3", "}"],
    "description": "Named function"
  },

  "Async Named function": {
    "prefix": "anfn",
    "body": ["const $1 = async ($2) => {", "\t$3", "}"],
    "description": "Async Named function"
  },

  "Function Component": {
    "prefix": "fc",
    "body": [
      "interface $1Props {",
      "\t$2",
      "}",
      " ",
      "const $1: FunctionComponent<$1Props> = ($3) => {",
      "\t$4",
      "\treturn ( $0 );",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Function Component"
  },

  "Function Syntax Component": {
    "prefix": "ffc",
    "body": [
      "function $1($2) {",
      "\t",
      "\t",
      "\treturn (",
      "\t\t<>",
      "\t\t\t$0",
      "\t\t</>",
      "\t);",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Function Syntax Component"
  },

  "Next.js Get Server Side Props Typescript": {
    "prefix": "ssr",
    "body": [
      "export const getServerSideProps: GetServerSideProps = async (ctx) => {",
      "\t",
      "\t",
      "\treturn { props: {} };",
      "}"
    ],
    "description": "Next.js Get Server Side Props Typescript"
  },

  "Next.js Get Static Props Typescript": {
    "prefix": "ssg",
    "body": [
      "export const getStaticProps: GetStaticProps = async (ctx) => {",
      "\t",
      "\t",
      "\treturn { props: {} };",
      "}"
    ],
    "description": "Next.js Get Static Props Typescript"
  },

  "Button onClick": {
    "prefix": "boc",
    "body": ["<button onClick={$2}>$1</button>\n"],
    "description": "Button onClick"
  },

  "getDerivedStateFromProps": {
    "prefix": "gds",
    "body": [
      "static getDerivedStateFromProps(nextProps: $1Props, prevState: $1State) {",
      "\t$0",
      "}"
    ],
    "description": "getDerivedStateFromProps"
  },

  "getSnapshotBeforeUpdate": {
    "prefix": "gsbu",
    "body": [
      "getSnapshotBeforeUpdate(prevProps: $1Props, prevState: $1State) {",
      "\t$0",
      "}"
    ],
    "description": "getSnapshotBeforeUpdate"
  },

  "render": {
    "prefix": "ren",
    "body": ["render() {", "\treturn (", "\t\t $0", "\t);", "}"],
    "description": "render"
  },

  "Render Prop": {
    "prefix": "rprop",
    "body": [
      "interface $1Props {",
      "\trender: (state: $1State) => JSX.Element",
      "}",
      " ",
      "interface $1State {",
      "\t$2",
      "}",
      " ",
      "class $1 extends React.Component<$1Props, $1State> {",
      "\tstate = { $3: $4 }",
      "\trender() { ",
      "\t\treturn this.props.render(this.state);",
      "\t}",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Render Prop"
  }
}
